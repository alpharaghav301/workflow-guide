import { Presentation } from "@/types/presentation";

export const presentationData: Presentation = {
  title: "Developing and Managing n8n Workflows",
  subtitle: "Best Practices and Installation Guidelines",
  slides: [
    {
      id: 1,
      title: "Developing and Managing n8n Workflows",
      content: [
        "Best Practices and Installation Guidelines",
        "",
        "Presented by: Raghav Mittal",
        "Date: 12th June,2024",
      ],
      type: "title",
    },
    {
      id: 2,
      title: "Agenda",
      content: [
        "Trigger Types & Values",
        "Execution Frequency and Capacity Planning",
        "Workflow Naming Conventions",
        "Workflow Development & Documentation",
        "Input Variable Management",
        "Review and Publishing Process",
        "Workflow Installation",
        "Workflow Updates and Modifications",
      ],
      type: "agenda",
    },
    {
      id: 3,
      title: "Trigger Types",
      content: [
        "Event-based Triggers:",
        "  • Examples: Webhooks.",
        "  • Real-time processing",
        "  • Reactive to events generated by Gravity.",
        "",
        "Time-based Triggers:",
        "  • Scheduled intervals (daily, hourly, weekly)",
        "  • Batch processing capabilities",
      ],
      type: "content",
    },
    {
      id: 4,
      title: "Trigger Value",
      content: [
        "Time-based Frequency",
        "  • How often? (Hourly, daily, weekly)",
        "  • Applicable filters for each run",
        "  • Resource optimization considerations",
        "",
        "Event-based",
        "  • Which specific event initiates the workflow?",
        "  • Any conditional filters on events",
        "  • Error handling for failed triggers",
      ],
      type: "content",
    },
    {
      id: 5,
      title: "Potential Number of Executions",
      content: [
        "Assuming 100,000 appointments/year",
        "Approximately 400 appointments/day on average",
        "",
        "Considerations:",
        "  • Peak times/days",
        "  • Workflow complexity",
        "  • Resource optimization (server resources, limits)",
        "  • Concurrent execution limits",
        "  • Error handling and retry logic",
      ],
      type: "content",
    },
    {
      id: 6,
      title: "Workflow Naming Convention",
      content: [
        "Naming Guidelines:",
        "  • Clearly indicate purpose (e.g., AppointmentReminder_Email)",
        "  • Include trigger type (Event, Daily, etc.)",
        "",
        "Examples:",
        "  • Event_CoverageCreated_Eligibility",
        "",
      ],
      type: "content",
    },
    {
      id: 7,
      title: "Developing the n8n Workflow",
      content: [
        "Use Developer Account: ",
        "  • For developing any of the workflow, Use developer account in workflow.test.jit.care.",
        "",
        "Define clear workflow steps:",
        "  • Trigger selection",
        "  • Data fetching",
        "  • Processing data",
        "  • Action/Output (e.g., API call, email, update database)",
        "",
        "Document each step clearly:",
        "  • Use inline comments/descriptions",
        "  • Describe logic in separate documentation",
        "  • Include error handling strategies",
        "  • Define success/failure criteria",
      ],
      type: "content",
    },
    {
      id: 8,
      title: "Input Variable Management",
      content: [
        "Best practice: Single block for input variables",
        "",
        "Benefits of having single input variables:",
        "  • Ease of maintenance",
        "  • Consistency across the workflow",
        "  • Simplifies updates and debugging",
        "  • Centralized configuration management",
        "",
        "Example block:",
        "{",
        '  "apiUrl": "https://api.example.com",',
        '  "appointmentStatus": ["booked", "pending"],',
        '  "notificationEmail": "alerts@example.com"',
        "}",
      ],
      type: "content",
    },
    {
      id: 9,
      title: "Workflow Review Process",
      content: [
        "Steps for review:",
        "  1. Functional Testing: Trigger tests, boundary cases",
        "  2. Peer Review: Code quality and clarity ",
        "  3. Performance Assessment: Execution time, resource usage",
        "  4. Security Review: Credential management, data handling",
        "  5. Approval Workflow: Documented sign-off from @Raghav, @Arpit.",
        "",
        "Documentation Requirements:",
        "  • Test results and coverage",
        "  • Performance benchmarks",
        "  • Security compliance checklist",
      ],
      type: "content",
    },
    {
      id: 10,
      title: "Publish Workflow",
      content: [
        "Final validation before production:",
        "  • Verify configuration settings (credentials, endpoints)",
        "  • Confirm access controls",
        "  • Test in test environment.",
        "  • Attach the tag available for making available for installation at gravity workflow marketplace (https://jit.care/admin?menu=Workflows)",
        "",
        "Move to production environment:",
        "  • Deploy via n8n workflow export/import feature (Download from Test environment and upload it to production)",
        "  • Monitor initial executions",
        "  • Set up alerting and logging",
      ],
      type: "content",
    },
    {
      id: 11,
      title: "Installing Workflow",
      content: [
        "Installation steps:",
        "  1. Go to https://jit.care/admin?menu=Workflows",
        "  2. Install the workflow",
        "  3. Go to workflow.jit.care with vpn connection on.",
        "  4. Update the required parameteres which are specific to a user (tenant)",
      ],
      type: "content",
    },
    {
      id: 13,
      title: "Modify Workflow",
      content: [
        "Steps for modification:",
        "  1. Identify required changes clearly",
        "  2. Modify in non-production environment first",
        "  3. Test thoroughly",
        "  4. Document changes clearly",
        "  5. Deploy using the Update Workflow steps",
        "  6. Monitor and validate changes",
        "",
        "Change Management:",
        "  • Impact assessment",
        "  • Stakeholder approval",
        "  • Rollback plan",
        "  • Follow the Workflow Review Process.   ",
      ],
      type: "content",
    },
    {
      id: 12,
      title: "Update Workflow",
      content: [
        "Routine updates:",
        "  • If you are seeing a updated version of the workflow on https://jit.care/admin?menu=Workflows and you want to udpate it then delete the installed workflow from workflow.jit.care and now refresh the https://jit.care/admin?menu=Workflows page, you will see an option to install it again. Now follow the same process as described in slide 11.",
      ],
      type: "content",
    },
    {
      id: 14,
      title: "Summary & Best Practices",
      content: [
        "Key Takeaways:",
        "  • Always document clearly",
        "  • Centralized input management",
        "  • Efficient trigger utilization",
        "  • Regular review and testing",
        "  • Controlled deployment processes",
        "",
        "Success Factors:",
        "  • Consistent naming conventions",
        "  • Proper error handling",
        "  • Performance monitoring",
        "  • Security best practices",
        "  • Team collaboration",
      ],
      type: "content",
    },
    {
      id: 15,
      title: "Questions & Answers",
      content: [
        "Thank you for your attention!",
        "",
        "Contact Information:",
        "• Email: engineering@alphanodus.com",
        "• Documentation: https://github.com/alphanodus/n8n-presentation/discussions",
        "• Support: support@alphanodus.com",
      ],
      type: "qa",
    },
  ],
};
